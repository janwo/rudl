@import "variables.scss";

@mixin breakpoint($min-breakpoint: null, $max-breakpoint: null) {
  $min-breakpoint: map-get($base-breakpoints, $min-breakpoint);
  $max-breakpoint: map_get($base-breakpoints, $max-breakpoint);
  $query: "all";

  @if $min-breakpoint != null and $max-breakpoint != null {
    $query: "(min-width: #{$min-breakpoint}) and (max-width: #{$max-breakpoint})";
  } @else if $min-breakpoint != null {
    $query: "(min-width: #{$min-breakpoint})";
  } @else if $max-breakpoint != null {
    $query: "(max-width: #{$max-breakpoint})";
  }

  @media #{$query} {
    @content;
  }
}

@mixin setup-max-width() {
  $first-key: nth(map_keys($base-max-width), 1);
  @if ($first-key) {
    max-width: map_get($base-max-width, $first-key);
    margin-left: auto;
    margin-right: auto;
  }

  @each $name, $value in $base-max-width {
    @include breakpoint(null, $name) {
      max-width: map_get($base-max-width, $name);
    }
  }

  width: 100%;
}

@mixin setup-default-padding() {

  @include breakpoint('small') {
    padding: map_get($base-padding, 'default');
  }

  @include breakpoint(null, 'small') {
    padding: map_get($base-padding, 'smaller');
  }
}

@mixin setup-input-borders() {
  border: map_get($base-line-widths, 'default') inactive(map_get($base-colors, 'secondary')) solid;
  border-radius: $base-border-radius;
}

@mixin setup-input($borders: true) {
  $input-field-input-font-size: map_get($base-font-size, 'default');
  $input-field-input-padding: $input-field-input-font-size / 1.5; // Golden Ratio <3

  resize: none;
  border: none;
  outline: none;
  display: block;;
  color: map_get($base-colors, 'primary-text');
  padding: $input-field-input-padding;
  font-size: $input-field-input-font-size;
  font-family: inherit;
  font-weight: inherit;
  line-height: map_get($base-line-height, 'default');
  width: 100%;

  &::placeholder {
    color: inactive(map_get($base-colors, 'primary-text'));
  }

  @if ($borders) {
    @include setup-input-borders();
  }
}
