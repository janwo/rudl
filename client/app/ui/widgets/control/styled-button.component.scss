@import '../../variables';

$button-border-size: 0.1rem;
$button-border-radius: 0.25rem;
$button-font-size: map_get($base-font-size, 'default');
$button-padding: $button-font-size / 1.5; // Golden Ratio <3
$button-default-scale-icon: 1.25;
$button-default-scale-text: 1;

:host {
  display: inline-block;
  margin-bottom: map_get($base-padding, 'small');
  pointer-events: none;

  button {
    pointer-events: auto;
    line-height: 1;
    transition: box-shadow 0.25s;
    cursor: pointer;
    border: map_get($base-line-widths, 'default') transparent solid;
    border-radius: $button-border-radius;
    font-size: inherit;
    font-family: inherit;
    font-weight: inherit;
    padding: $button-padding $button-padding * 1.5;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;

    &:focus {
      outline: none;
      border: transparentize(map_get($base-colors, 'secondary'), 0.5) $button-border-size solid;
    }

    .fa {
      transform: scale($button-default-scale-icon);

      &:not(:only-child) {
        margin-right: map_get($base-padding, 'small');
      }
    }

    span {
      transform: scale($button-default-scale-text);
    }

    .flag {
      width: $button-font-size;
      height: $button-font-size;
      border-radius: 50%;
    }

    &:not(.disabled):not(.shadowed) {
      &:hover {
        span {
          transform: scale($button-default-scale-text * 1.025);
        }

        .fa {
          transform: scale($button-default-scale-icon * 1.025);
        }
      }

      &:active {
        span {
          transform: scale($button-default-scale-text * 0.95);
        }

        .fa {
          transform: scale($button-default-scale-icon * 0.95);
        }
      }
    }

    &.disabled {
      cursor: default;

      .flag {
        opacity: 0.5;
      }
    }

    &.shadowed {
      box-shadow: 0.05rem 0.05rem 0.2rem rgba(0, 0, 0, 0.15);

      &:not(.disabled) {
        &:hover {
          box-shadow: 0.05rem 0.05rem 0.3rem rgba(0, 0, 0, 0.25);
        }

        &:active {
          box-shadow: 0.05rem 0.05rem 0.1rem rgba(0, 0, 0, 0.125);
        }
      }
    }

    // Definitions of button styles.
    &.outlined {
      border: map_get($base-line-widths, 'default') map_get($base-colors, 'secondary') solid;
      color: map_get($base-colors, 'secondary');
      background-color: transparent;

      &.disabled {
        border-color: inactive(map_get($base-colors, 'secondary'));
        color: inactive(map_get($base-colors, 'secondary'));
      }
    }

    &.outlined-inverse {
      border: map_get($base-line-widths, 'default') map_get($base-colors, 'background-highlighted') solid;
      color: map_get($base-colors, 'background-highlighted');
      background-color: transparent;

      &.disabled {
        border-color: inactive(map_get($base-colors, 'background-highlighted'));
        color: inactive(map_get($base-colors, 'background-highlighted'));
      }
    }

    &.filled {
      border: map_get($base-line-widths, 'default') transparent solid;
      color: map_get($base-colors, 'background-highlighted');
      background-color: map_get($base-colors, 'secondary');

      &.disabled {
        color: inactive(map_get($base-colors, 'background-highlighted'));
        background-color: inactive(map_get($base-colors, 'secondary'));
      }
    }

    &.filled-inverse {
      border: map_get($base-line-widths, 'default') transparent solid;
      color: map_get($base-colors, 'secondary');
      background-color: map_get($base-colors, 'background-highlighted');

      &.disabled {
        color: inactive(map_get($base-colors, 'secondary'));
        background-color: inactive(map_get($base-colors, 'background-highlighted'));
      }
    }

    &.facebook {
      $facebook-color: #3b5998;
      background-color: $facebook-color;

      &.disabled {
        background-color: inactive($facebook-color);
      }
    }

    &.google {
      $google-color: #df5138;
      background-color: $google-color;

      &.disabled {
        background-color: inactive($google-color);
      }
    }

    &.like {
      color: map_get($base-colors, 'swipe-like');
    }

    &.dislike {
      color: map_get($base-colors, 'swipe-dislike');
    }
  }
}
